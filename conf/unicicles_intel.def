BootStrap: docker
From: intel/hpckit:2024.2.1-0-devel-ubuntu22.04

%help
    Build a portable environment for the BICICLES code

%setup
    # create directory to build chombo and other packages in the container
    mkdir -p ${APPTAINER_ROOTFS}/usr/local/build
    mkdir -p ${APPTAINER_ROOTFS}/opt/nzesm_apptainer

%files
    # copy files from host to the container prior to calling %post
    # SOURCE DESTINATION. SOURCE is always on the host. DESTINATION is by default in container
    /Users/home/alevroal/BISICLES/Chombo /usr/local/build
    /Users/home/alevroal/BISICLES/cism /usr/local/build
    /Users/home/alevroal/BISICLES/wrappers /usr/local/build
    packages/unicicles/wrappers/ukesm-ice_NETCDF/Makefile.gnu /opt/nzesm_apptainer/Makefile.gnu
    packages/bisicles-uob/code/cdriver/GNUmakefile /opt/nzesm_apptainer/GNUmakefile
    
%environment
    export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

%post

    apt-get update && apt-get upgrade -y

    # May be required for rose/fcm... ?
    echo "> Setting timezone to UTC non-interactively..."
    ln -fs /usr/share/zoneinfo/UTC /etc/localtime
    apt-get install -y tzdata
    dpkg-reconfigure --frontend noninteractive tzdata

    apt-get install -y git vim perl csh python3 wget file subversion cmake cmake-curses-gui \
                       automake apt-file libxml2-dev gcc gfortran g++ m4 curl libcurl4-openssl-dev \
                       zlib1g zlib1g-dev libtool

    ln -s /usr/bin/python3 /usr/bin/python

    export BUILD_DIR=/usr/local/build
    mkdir -p $BUILD_DIR

    # versions
    HDF5_VERSION="1.12.2"
    NETCDF_C_VERSION="4.9.2"
    NETCDF_FORTRAN_VERSION="4.6.1"
    NETCDF_CXX_VERSION="4.3.1"
    PNETCDF_VERSION="1.12.3"

    # compilers
    export CC=gcc
    export CXX=g++
    export FC=gfortran
    export F77=gfortran
    export MPICC=mpicc
    export MPICXX=mpicxx
    export MPIF77=mpif77
    export MPIF90=mpif90

    export NETCDF=/usr/local
    export HDF5=/usr/local
    export PNETCDF=/usr/local

    # hdf5
    cd $BUILD_DIR
    HDF5_VERSION_SHORT=$(echo $HDF5_VERSION | awk -F '.' '{print $1"."$2}')
    wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_VERSION_SHORT}/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.gz
    tar xf hdf5-${HDF5_VERSION}.tar.gz
    cd hdf5-${HDF5_VERSION}
    mkdir build
    cd build
    CC=$MPICC FC=$MPIF90 ../configure --prefix=$HDF5 --enable-parallel --enable-fortran
    make -j 4
    make install
    cd ../..
    rm -rf hdf5-${HDF5_VERSION}
    ls -l ${HDF5}/lib
    ls -l ${HDF5}/include
    ls -l ${HDF5}/bin

    # netcdf-c
    cd $BUILD_DIR
    wget https://downloads.unidata.ucar.edu/netcdf-c/${NETCDF_C_VERSION}/netcdf-c-${NETCDF_C_VERSION}.tar.gz
    tar xf netcdf-c-${NETCDF_C_VERSION}.tar.gz
    cd netcdf-c-${NETCDF_C_VERSION}
    mkdir build
    cd build
    CPPFLAGS="-I${HDF5}/include" \
    LDFLAGS="-L${HDF5}/lib -lhdf5 -lhdf5_hl" \
    CC=$MPICC ../configure --prefix=$NETCDF
    make -j 4
    make install
    cd ../..
    rm -rf netcdf-c-${NETCDF_C_VERSION}
    ls -l ${NETCDF}/lib
    ls -l ${NETCDF}/include
    ls -l ${NETCDF}/bin

    # netcdf-fortran
    cd $BUILD_DIR
    wget https://downloads.unidata.ucar.edu/netcdf-fortran/${NETCDF_FORTRAN_VERSION}/netcdf-fortran-${NETCDF_FORTRAN_VERSION}.tar.gz
    tar xf netcdf-fortran-${NETCDF_FORTRAN_VERSION}.tar.gz
    cd netcdf-fortran-${NETCDF_FORTRAN_VERSION}
    mkdir build
    cd build
    CPPFLAGS="$(${NETCDF}/bin/nc-config --cflags)" LDFLAGS="$(${NETCDF}/bin/nc-config --libs)" \
    ../configure --prefix=$NETCDF
    make
    make install
    cd ../..
    rm -rf netcdf-fortran-${NETCDF_FORTRAN_VERSION}
    ls -l ${NETCDF}/lib
    ls -l ${NETCDF}/include
    ls -l ${NETCDF}/bin

    # netcdf-c++
    cd $BUILD_DIR
    wget https://downloads.unidata.ucar.edu/netcdf-cxx/${NETCDF_CXX_VERSION}/netcdf-cxx4-${NETCDF_CXX_VERSION}.tar.gz
    tar xf netcdf-cxx4-${NETCDF_CXX_VERSION}.tar.gz
    cd netcdf-cxx4-${NETCDF_CXX_VERSION}
    mkdir build
    cd build
    CC=$CC CXX=$CXX CPPFLAGS="$(${NETCDF}/bin/nc-config --cflags)" LDFLAGS="$(${NETCDF}/bin/nc-config --libs)" \
    ../configure --prefix=$NETCDF
    make
    make install
    cd ../..
    rm -rf netcdf-cxx4-${NETCDF_CXX_VERSION}.tar.gz
    ls -l ${NETCDF}/lib
    ls -l ${NETCDF}/include
    ls -l ${NETCDF}/bin

    # pnetcdf
    cd $BUILD_DIR
    wget https://parallel-netcdf.github.io/Release/pnetcdf-${PNETCDF_VERSION}.tar.gz
    tar xf pnetcdf-${PNETCDF_VERSION}.tar.gz
    cd pnetcdf-${PNETCDF_VERSION}
    mkdir build
    cd build
    ../configure --prefix=$PNETCDF --with-netcdf4=$NETCDF
    make
    make install
    cd ../..
    rm -rf pnetcdf-${PNETCDF_VERSION}.tar.gz
    ls -l ${PNETCDF}/lib
    ls -l ${PNETCDF}/include
    ls -l ${PNETCDF}/bin

    # local copy of the code, want to get rid of

    export HDF5_LIBDIR=/usr/local/lib
    export HDF5_INCDIR=/usr/local/include
    export NETCDF_LIBDIR=/usr/local/lib
    export NETCDF_INCDIR=/usr/local/include
    export PYTHONLIBS=/usr/lib/python3.12

    export BISICLES_HOME=$BUILD_DIR
    export GLIM_DIR=$BISICLES_HOME/cism/parallel

    echo "\n\nBuilding chombo..."
    cd $BUILD_DIR
    cd Chombo/lib
    wget https://raw.githubusercontent.com/pletzer/nzesm_apptainer/main/packages/chombo/gnu/Make.defs.local
    mv Make.defs.local mk/
    make all

    echo "\n\nBuilding bisicles..."
    cd $BUILD_DIR
    git clone https://github.com/ggslc/bisicles-uob.git
    cd bisicles-uob/code/exec2D
    # this assumes that bisicles-uob and Chombo are checkout in the same directory
    make clean
    make

    echo "\n\nBuilding cdriver wrapper..."
    cd $BUILD_DIR
    cd bisicles-uob/code/cdriver
    cp /opt/nzesm_apptainer/GNUmakefile GNUmakefile.apptainer
    FC=gfortran make -f GNUmakefile.apptainer ftestwrapper

    echo "\n\nBuilding glimmer-cism..."
    cd $BUILD_DIR
    cd cism/cism-src
    ./bootstrap
    cd $BUILD_DIR
    mkdir cism/parallel
    cd cism/parallel
    FC=mpif90 CXX=g++ \
    FCFLAGS="-fno-range-check -ffree-line-length-0 -DBISICLES_CDRIVER -DNO_RESCALE -fallow-argument-mismatch -fallow-invalid-boz -g -I$BISICLES_HOME/bisicles-uob/code/src " \
    LDFLAGS=" -L$BISICLES_HOME/bisicles-uob/code/cdriver -L$BISICLES_HOME/bisicles-uob/code/lib -lBisicles2d.Linux.64.mpicxx.gfortran.OPT.MPI -lChomboLibs2d.Linux.64.mpicxx.gfortran.OPT.MPI -lstdc++ -lcrypt -lpthread -ldl -lutil -lm -lz" \
    ../cism-src/configure \
    --with-netcdf-lib=$NETCDF_LIBDIR --with-netcdf-include=$NETCDF_INCDIR \
    --with-hdf5-lib=$HDF5_LIBDIR --with-hdf5-include=$HDF5_INCDIR \
    --enable-mpi --prefix=$BUILD_DIR/cism/parallel/ --disable-python
    
    mv $BUILD_DIR/cism/iofiles/glide_io.F90 $BUILD_DIR/cism/parallel/libglide/glide_io.F90
    mv $BUILD_DIR/cism/iofiles/glint_io.F90 $BUILD_DIR/cism/parallel/libglint/glint_io.F90
    mv $BUILD_DIR/cism/iofiles/glint_mbal_io.F90 $BUILD_DIR/cism/parallel/libglint/glint_mbal_io.F90
    make -d
    make install

    echo "\n\nBuilding unicicles wrapper"
    cd $BUILD_DIR/wrappers
    cp /opt/nzesm_apptainer/Makefile.gnu .
    make clean -f Makefile.gnu
    make -f Makefile.gnu
